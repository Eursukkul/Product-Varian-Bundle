// <auto-generated />
using System;
using FlowAccount.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowAccount.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowAccount.Domain.Entities.Bundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Bundles_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Bundles_Name");

                    b.ToTable("Bundles", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.BundleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BundleId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemType", "ItemId")
                        .HasDatabaseName("IX_BundleItems_ItemType_ItemId");

                    b.HasIndex("BundleId", "ItemType", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_BundleItems_BundleId_ItemType_ItemId");

                    b.ToTable("BundleItems", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Name");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_ProductMasters_CategoryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProductMasters_Name");

                    b.HasIndex("IsActive", "CategoryId")
                        .HasDatabaseName("IX_ProductMasters_IsActive_CategoryId");

                    b.ToTable("ProductMasters", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_ProductVariants_Price");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductVariants_SKU");

                    b.HasIndex("ProductMasterId", "IsActive")
                        .HasDatabaseName("IX_ProductVariants_ProductMasterId_IsActive");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductVariantAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("VariantOptionValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantOptionValueId")
                        .HasDatabaseName("IX_ProductVariantAttributes_VariantOptionValueId");

                    b.HasIndex("ProductVariantId", "VariantOptionValueId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductVariantAttributes_ProductVariantId_VariantOptionValueId");

                    b.ToTable("ProductVariantAttributes", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ItemType", "ItemId", "WarehouseId")
                        .HasDatabaseName("IX_Stocks_ItemType_ItemId_WarehouseId");

                    b.HasIndex("WarehouseId", "ItemType", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_Stocks_WarehouseId_ItemType_ItemId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductMasterId", "DisplayOrder")
                        .HasDatabaseName("IX_VariantOptions_ProductMasterId_DisplayOrder");

                    b.ToTable("VariantOptions", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VariantOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantOptionId", "DisplayOrder")
                        .HasDatabaseName("IX_VariantOptionValues_VariantOptionId_DisplayOrder");

                    b.ToTable("VariantOptionValues", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Warehouses_Name");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.BundleItem", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.Bundle", "Bundle")
                        .WithMany("BundleItems")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductMaster", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductVariantAttribute", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowAccount.Domain.Entities.VariantOptionValue", "VariantOptionValue")
                        .WithMany("ProductVariantAttributes")
                        .HasForeignKey("VariantOptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("VariantOptionValue");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Stock", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.ProductVariant", null)
                        .WithMany("Stocks")
                        .HasForeignKey("ProductVariantId");

                    b.HasOne("FlowAccount.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOption", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("VariantOptions")
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOptionValue", b =>
                {
                    b.HasOne("FlowAccount.Domain.Entities.VariantOption", "VariantOption")
                        .WithMany("Values")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VariantOption");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Bundle", b =>
                {
                    b.Navigation("BundleItems");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductMaster", b =>
                {
                    b.Navigation("ProductVariants");

                    b.Navigation("VariantOptions");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOption", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.VariantOptionValue", b =>
                {
                    b.Navigation("ProductVariantAttributes");
                });

            modelBuilder.Entity("FlowAccount.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
